
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: MIT-0. AWS CloudFormation template for Global IoT Device Provisioning.",

  "Parameters" : {
    "S3BucketName": {
      "Description" : "S3 Bucket in the same region where you have put the zip for the Lambda.",
      "Type": "String",
      "ConstraintDescription" : "Must be an existing S3 Bucket in the same region.",
      "AllowedPattern" : ".+"
    },
    "IpStackApiKey": {
      "Description" : "API Key to access the api from http://ipstack.com. If you don't have an API Key sign up at http://ipstack.com",
      "Type": "String",
      "ConstraintDescription" : "Must be an existing API Key for ipstack.com",
      "AllowedPattern" : ".+"
    }
  },

  "Resources": {

    "LambdaGlobalIoTProvisioningRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "lambda.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            "arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration"
          ],
          "Policies": [ {
             "PolicyName": {"Fn::Join": ["-", ["LambdaGlobalIoTProvisioningPolicy", {"Ref": "AWS::Region"} ]]},
             "PolicyDocument": {
                 "Version":"2012-10-17",
                 "Statement":[
                    {
                       "Effect":"Allow",
                       "Action":[
                          "iot:DescribeEndpoint",
                          "iot:CreateKeysAndCertificate",
                          "iot:AttachPolicy",
                          "dynamodb:GetItem",
                          "dynamodb:UpdateItem"
                       ],
                       "Resource":"*"
                    }
                 ]
              }
             }
           ],
          "Path": "/",
          "RoleName": {"Fn::Join": ["-", ["LambdaGlobalIoTProvisioningRole", {"Ref": "AWS::Region"} ]]}
        }
    },

    "GlobalProvisioningLambda": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Handler": "lambda_function.lambda_handler",
          "Role": { "Fn::GetAtt" : ["LambdaGlobalIoTProvisioningRole", "Arn"] },
          "Code": {
            "S3Bucket": { "Ref": "S3BucketName"},
            "S3Key": "iot-global-provisioning.zip"
          },
          "Environment" : {
            "Variables": { "IPSTACK_API_KEY":{ "Ref": "IpStackApiKey"} }
          },
          "Runtime": "python2.7",
          "MemorySize" : 128,
          "Timeout": "60",
        }
      },

      "LambdaPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": {"Fn::GetAtt": ["GlobalProvisioningLambda", "Arn"]},
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {"Fn::Join": ["",
            ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "IoTApi"}, "/*"]
          ]}
        }
      },

    "IoTApi": {
        "Type": "AWS::ApiGateway::RestApi",
        "Properties": {
            "Body": {
                "swagger" : "2.0",
                "info" : {
                  "version" : "2018-03-16T15:33:58Z",
                  "title" : "IoT API"
                },
                "basePath" : "/test",
                "schemes" : [ "https" ],
                "paths" : {
                  "/device-provisioning" : {
                    "post" : {
                      "consumes" : [ "application/json" ],
                      "produces" : [ "application/json" ],
                      "responses" : {
                        "200" : {
                          "description" : "200 response",
                          "schema" : {
                            "$ref" : "#/definitions/Empty"
                          }
                        }
                      },
                      "x-amazon-apigateway-integration" : {
                        "uri": {"Fn::Join": ["",
                                            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GlobalProvisioningLambda", "Arn"]}, "/invocations"]
                        ]},
                        "responses" : {
                          "default" : {
                            "statusCode" : "200"
                          }
                        },
                        "passthroughBehavior" : "when_no_templates",
                        "httpMethod" : "POST",
                        "requestTemplates" : {
                          "application/json" : "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                        },
                        "contentHandling" : "CONVERT_TO_TEXT",
                        "type" : "aws"
                      }
                    }
                  }
                },
                "definitions" : {
                  "Empty" : {
                    "type" : "object",
                    "title" : "Empty Schema"
                  }
                }
            }
        }
    },

      "IoTApiCWRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": [ "apigateway.amazonaws.com" ] },
              "Action": "sts:AssumeRole"
            }]
          },
          "Path": "/",
          "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"]
        }
      },

    "IoTApiAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["IoTApiCWRole", "Arn"] }
      }
    },

    "IoTApiStage": {
      "DependsOn": ["IoTApiAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "IoTApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "IoTApi"},
        "StageName": "test"
      }
    },

    "IoTApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "IoTApi"}
      }
    },

    "IoTProvisioningTable": {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [ {
            "AttributeName" : "thing_name",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [ {
            "AttributeName" : "thing_name",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "5"
        },
        "TableName" : "iot-global-provisioning",
      }
    }

  },

  "Outputs": {
    "IoTApiGWUrl": {
      "Description": "Amazon API Gateway URL for global iot device provisioning.",
      "Value": {"Fn::Join": ["",
        ["https://", {"Ref": "IoTApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/test/device-provisioning"]
      ]}
    }
  }
}
